DATA SEGMENT
x DW 0
INVALID_NUMBER_INPUT DB 0DH, 0AH, 'Input was not a number! Start Over', 0DH, 0AH, '$'
NEW_LINE_CHARS DB 0DH, 0AH, '$'
NUMBER_OUT_PUT_BUFFER DB 8 DUP(?)
DATA ENDS
STACK_SEG SEGMENT STACK
DW 1000H DUP(?)
STACK_SEG ENDS
CODE SEGMENT
ASSUME CS : CODE, DS : DATA, SS : STACK_SEG
START:
MOV AX, DATA
MOV DS, AX
MOV BP, SP
SUB SP, 0
BLOCK0:
MOV AX, 4 
MOV WORD PTR x, AX 
MOV AX, WORD PTR x
CALL PRINTNUM
MOV AX, 4C00H
INT 21H
PRINTNUM PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
PUSH SI
PUSH DI
LEA DI, NUMBER_OUT_PUT_BUFFER
CMP AX, 8000H
JB PRINT_POSITIVE_NUMBER
MOV SI, WORD PTR -1
IMUL SI
MOV BX, AX
MOV DL, '-'
MOV [DI], DL
INC DI
JMP PRINT_NEGATIVE_NUMBER
PRINT_POSITIVE_NUMBER:
MOV BX, AX
PRINT_NEGATIVE_NUMBER:
CMP BX, 30000
JAE LENGTH_MAXIMUM_NUMBER_LENGTH
MOV AX, 10
MOV CX, 1
MOV SI, 10
NUMBER_PRINT_LENGTH_LOOP:
CMP AX, BX
JA END_NUMBER_PRINT_LENGTH
MUL SI
INC CX
JMP NUMBER_PRINT_LENGTH_LOOP
LENGTH_MAXIMUM_NUMBER_LENGTH:
MOV CX, 5
MOV SI, 10
END_NUMBER_PRINT_LENGTH:
MOV AX, BX
ADD DI, CX
MOV BX, DI
DEC DI
XOR DX, DX
NUMBER_PRINT_LOOP:
DIV SI
ADD DL, '0'
MOV [DI], DL
DEC DI
XOR DX, DX
LOOP NUMBER_PRINT_LOOP
END_PRINT_NUMBER:
MOV AL, '$'
MOV [BX], AL
LEA DX, NUMBER_OUT_PUT_BUFFER
MOV AH, 09H
INT 21H
LEA DX, NEW_LINE_CHARS
MOV AH, 09H
INT 21H
POP AX
POP BX
POP CX
POP DX
POP SI
POP DI
RET
PRINTNUM ENDP
CODE ENDS
END START
