DATA SEGMENT
number DW 0
GLOBAL_STRING_0 DB "enter number to check if hes even! ", 0DH, 0AH, '$'
GLOBAL_STRING_1 DB "number is even!", 0DH, 0AH, '$'
GLOBAL_STRING_2 DB "number is not even", 0DH, 0AH, '$'
INVALID_NUMBER_INPUT DB 0DH, 0AH, 'Input was not a number! Start Over', 0DH, 0AH, '$'
NEW_LINE_CHARS DB 0DH, 0AH, '$'
NUMBER_OUT_PUT_BUFFER DB 8 DUP(?)
DATA ENDS
STACK_SEG SEGMENT STACK
DW 1000H DUP(?)
STACK_SEG ENDS
CODE SEGMENT
ASSUME CS : CODE, DS : DATA, SS : STACK_SEG
START:
MOV AX, DATA
MOV DS, AX
MOV BP, SP
SUB SP, 6
BLOCK0:
LEA AX, GLOBAL_STRING_0
CALL PRINTSTRING
CALL GETNUM
MOV WORD PTR number, AX
PUSH WORD PTR number
CALL BLOCK1 
MOV BP[-2], BX
JMP BLOCK6 
BLOCK3:
LEA AX, GLOBAL_STRING_1
CALL PRINTSTRING
JMP BLOCK5 
BLOCK5:
MOV AX, 4C00H
INT 21H
BLOCK4:
LEA AX, GLOBAL_STRING_2
CALL PRINTSTRING
JMP BLOCK5 
BLOCK1:
PUSH BP
MOV BP, SP
SUB SP, 10
MOV AX, WORD PTR BP[+4]
MOV BP[-2], AX
MOV AX, WORD PTR BP[-2]  
MOV CX, 2 
XOR DX, DX
DIV CX 
MOV BX, DX 
MOV BP[-4], BX
CMP BX, 0 
JE YES0 
MOV BL, 0 
JMP CON0 
YES0:
MOV BL, 1 
CON0:
MOV BL, BL
JMP BLOCK2
BLOCK2:
ADD SP, 10
POP BP
RET 2
BLOCK6:
CMP WORD PTR BP[-2] , 1 
JE YES1 
MOV CL, 0 
JMP CON1 
YES1:
MOV CL, 1 
CON1:
TEST CL, 1 
JNZ BLOCK3 
JMP BLOCK4 
GETNUM PROC
PUSH BX
PUSH CX
PUSH DX
PUSH SI
XOR BX, BX
XOR CX, CX
MOV AH, 1
INT 21H
CMP AL, '-'
JE NEGATIVE_NUMBER_INPUT
XOR SI, SI
JMP POSITIVE_NUMBER_INPUT
NEGATIVE_NUMBER_INPUT:
INT 21H
MOV SI, 1
POSITIVE_NUMBER_INPUT:
CMP AL, '+'
JNE NUMBER_INPUT_LOOP
INT 21H
NUMBER_INPUT_LOOP:
CMP AL, 0DH
JE END_NUMBER_INPUT
CMP AL, '0'
JB INVALID_NUMBER_INPUT_BLOCK
CMP AL, '9'
JA INVALID_NUMBER_INPUT_BLOCK
MOV CL, AL
SUB CL, '0'
MOV AX, BX
MOV BX, 10
MUL BX
MOV BX, AX
ADD BX, CX
MOV AH, 1
INT 21H	
JMP NUMBER_INPUT_LOOP
END_NUMBER_INPUT:
MOV AX, BX
TEST SI, 1
JZ RETURN_FROM_NUMBER_INPUT
MOV SI, -1
IMUL SI
RETURN_FROM_NUMBER_INPUT:
POP BX
POP CX
POP DX
POP SI
RET
INVALID_NUMBER_INPUT_BLOCK:
LEA DX, INVALID_NUMBER_INPUT
MOV AH, 09H
INT 21H
POP BX
POP CX
POP DX
POP SI
CALL GETNUM
RET
GETNUM ENDP
PRINTSTRING PROC
PUSH DX
MOV DX, AX
MOV AH, 09H
INT 21H
POP DX
RET
PRINTSTRING ENDP
CODE ENDS
END START
