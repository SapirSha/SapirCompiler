#ifndef TOKENS_H
#define TOKENS_H

typedef enum {
    TOKEN_UNKNOWN = 0,
    TOKEN_IDENTIFIER,
    TOKEN_NUMBER,
    TOKEN_FLOAT_NUMBER,
    TOKEN_OPERATOR,
    TOKEN_KEYWORD,
    TOKEN_STRING_LITERAL,
    TOKEN_SEPARATOR,

    TOKEN_OPERATOR_PLUS,        // +
    TOKEN_OPERATOR_MINUS,       // -
    TOKEN_OPERATOR_MULTIPLY,    // *
    TOKEN_OPERATOR_DIVIDE,      // /
    TOKEN_OPERATOR_ASSIGN,      // =
    TOKEN_OPERATOR_GREATER,     // >
    TOKEN_OPERATOR_LESS,        // <
    TOKEN_OPERATOR_MODULO,      // %
    TOKEN_OPERATOR_AND,         // &
    TOKEN_OPERATOR_OR,          // |
    TOKEN_OPERATOR_XOR,         // ^
    TOKEN_OPERATOR_NOT,         // !
    TOKEN_OPERATOR_EQUAL,       // ==
    TOKEN_OPERATOR_NOT_EQUAL,   // !=
    TOKEN_OPERATOR_GREATER_EQUAL, // >=
    TOKEN_OPERATOR_LESS_EQUAL,  // <=
    TOKEN_OPERATOR_ALSO,        // &&
    TOKEN_OPERATOR_EITHER,      // ||

    TOKEN_IF,
	TOKEN_WHILE,
	TOKEN_RETURN,
	TOKEN_FOR,
	TOKEN_ELSE,
	TOKEN_INT,
	TOKEN_CHAR,
	TOKEN_DOUBLE,
	TOKEN_BOOL,
	TOKEN_TRUE,
	TOKEN_FALSE,

    TOKEN_LPAREN, TOKEN_RPAREN, 
    TOKEN_LBRACES, TOKEN_RBRACES,
    TOKEN_COMMA,

    TOKEN_DO,
    TOKEN_CHANGE,
    TOKEN_PRINT,
    TOKEN_PRINT_INT,
    TOKEN_GET,
    TOKEN_GETS,
    TOKEN_FUNCTION,
    TOKEN_RETURNS,
    TOKEN_CALL,
    TOKEN_WITH,
    TOKEN_BREAK,
    TOKEN_EOF,

    NUM_OF_TOKENS
}Token_Types;

typedef struct  {
    char* lexeme;
    Token_Types type;
    int row;
    int col;
}Token;

#endif